snippet php
	<?php

	${1}

	?>
snippet ec
	echo "${1}";${2}
snippet echo
	echo "${1}";${2}
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
snippet $_ COOKIE['...']
	$_COOKIE['${1:var}']${2}
snippet $_ ENV['...']
	$_ENV['${1:var}']${2}
snippet $_ FILES['...']
	$_FILES['${1:var}']${2}
snippet $_ Get['...']
	$_GET['${1:var}']${2}
snippet $_ POST['...']
	$_POST['${1:var}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:var}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:var}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:var}']${2}
snippet doc_class
	/**
	 * ${1:class}
	 *
	 * @author ${2:`g:snips_author` <`g:snips_email`>}
	 * @copyright `g:snips_company` - `strftime('%B %d, %Y')`
	 * @package ${3:default}
	 */${4}
# Function - post doc
snippet doc_method
	/**
	 * ${1:method}
	 *
	 * @return ${2:void}
	 */${3}
snippet class
	class ${1:class}{
		${2}function ${3:__construct}(${4}){
			${5}
		}
	}
snippet wh
	while (${1}) {
		${2}
	}
snippet do
	do {
		${2}
	} while (${1});
snippet if
	if (${1}) {
		${2}
	}
snippet ife
	if (${1}) {
		${2}
	} else {
		${3}
	}
	${4}
snippet else
	else {
		${1}
	}
snippet elseif
	elseif (${1}) {
		${2}
	}
snippet t
	$${1:var} = ${2} ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:var}) {
		case '${2:value}':
			${3}
			break;
		${5}
		default:
			${4}
			break;
	}
snippet case
	case '${1:value}':
		${2}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4}
	}
snippet foreach
	foreach ($${1:var} as $${2:key}${3: => $value}) {
		${4}
	}
snippet fun
	${1:protected }function ${2:name}(${3:arg}){
		${4}
	}
snippet method
	${1:protected }function ${2:name}(${3:arg}){
		${4}
	}
snippet array
	$${1:name} = array(
		'${2}' => ${3}${4:,}
	);
snippet try
	try {
		${2}
	} catch (${1:Exception} $e) {
	}
snippet lambda
	${1:static }function (${2:args}) use (${3}) {
		${4}
	};
snippet pd
	echo '<pre>'; var_dump(${1}); echo '</pre>';
snippet 301
	header("HTTP/1.1 301 Moved Permanently"); 
	header("Location: ".${1}); 
	exit;
snippet 200
	header("HTTP/1.1 200 OK");
	exit;
snippet 500
	header("HTTP/1.1 500 Internal Server Error");
	exit;
snippet 403
	header("HTTP/1.1 403 Forbidden");
	exit;
snippet 404
	header("HTTP/1.1 404 Not Found");
	exit;
